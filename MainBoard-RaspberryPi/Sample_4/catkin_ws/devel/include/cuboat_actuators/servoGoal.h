// Generated by gencpp from file cuboat_actuators/servoGoal.msg
// DO NOT EDIT!


#ifndef CUBOAT_ACTUATORS_MESSAGE_SERVOGOAL_H
#define CUBOAT_ACTUATORS_MESSAGE_SERVOGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cuboat_actuators
{
template <class ContainerAllocator>
struct servoGoal_
{
  typedef servoGoal_<ContainerAllocator> Type;

  servoGoal_()
    : index(0)
    , state(false)  {
    }
  servoGoal_(const ContainerAllocator& _alloc)
    : index(0)
    , state(false)  {
  (void)_alloc;
    }



   typedef uint8_t _index_type;
  _index_type index;

   typedef uint8_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::cuboat_actuators::servoGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cuboat_actuators::servoGoal_<ContainerAllocator> const> ConstPtr;

}; // struct servoGoal_

typedef ::cuboat_actuators::servoGoal_<std::allocator<void> > servoGoal;

typedef boost::shared_ptr< ::cuboat_actuators::servoGoal > servoGoalPtr;
typedef boost::shared_ptr< ::cuboat_actuators::servoGoal const> servoGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cuboat_actuators::servoGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cuboat_actuators::servoGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cuboat_actuators::servoGoal_<ContainerAllocator1> & lhs, const ::cuboat_actuators::servoGoal_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cuboat_actuators::servoGoal_<ContainerAllocator1> & lhs, const ::cuboat_actuators::servoGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cuboat_actuators

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cuboat_actuators::servoGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cuboat_actuators::servoGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cuboat_actuators::servoGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cuboat_actuators::servoGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cuboat_actuators::servoGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cuboat_actuators::servoGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cuboat_actuators::servoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56a80a4bb2c205f050ad25bcdcdc1b1f";
  }

  static const char* value(const ::cuboat_actuators::servoGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56a80a4bb2c205f0ULL;
  static const uint64_t static_value2 = 0x50ad25bcdcdc1b1fULL;
};

template<class ContainerAllocator>
struct DataType< ::cuboat_actuators::servoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cuboat_actuators/servoGoal";
  }

  static const char* value(const ::cuboat_actuators::servoGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cuboat_actuators::servoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#part1: the goal message, to be sent by the client\n"
"uint8 index\n"
"bool state\n"
;
  }

  static const char* value(const ::cuboat_actuators::servoGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cuboat_actuators::servoGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servoGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cuboat_actuators::servoGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cuboat_actuators::servoGoal_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.index);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUBOAT_ACTUATORS_MESSAGE_SERVOGOAL_H
