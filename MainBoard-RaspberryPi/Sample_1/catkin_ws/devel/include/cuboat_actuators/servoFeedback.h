// Generated by gencpp from file cuboat_actuators/servoFeedback.msg
// DO NOT EDIT!


#ifndef CUBOAT_ACTUATORS_MESSAGE_SERVOFEEDBACK_H
#define CUBOAT_ACTUATORS_MESSAGE_SERVOFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cuboat_actuators
{
template <class ContainerAllocator>
struct servoFeedback_
{
  typedef servoFeedback_<ContainerAllocator> Type;

  servoFeedback_()
    : complete_percentage(0.0)  {
    }
  servoFeedback_(const ContainerAllocator& _alloc)
    : complete_percentage(0.0)  {
  (void)_alloc;
    }



   typedef float _complete_percentage_type;
  _complete_percentage_type complete_percentage;





  typedef boost::shared_ptr< ::cuboat_actuators::servoFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cuboat_actuators::servoFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct servoFeedback_

typedef ::cuboat_actuators::servoFeedback_<std::allocator<void> > servoFeedback;

typedef boost::shared_ptr< ::cuboat_actuators::servoFeedback > servoFeedbackPtr;
typedef boost::shared_ptr< ::cuboat_actuators::servoFeedback const> servoFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cuboat_actuators::servoFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cuboat_actuators::servoFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cuboat_actuators::servoFeedback_<ContainerAllocator1> & lhs, const ::cuboat_actuators::servoFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.complete_percentage == rhs.complete_percentage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cuboat_actuators::servoFeedback_<ContainerAllocator1> & lhs, const ::cuboat_actuators::servoFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cuboat_actuators

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cuboat_actuators::servoFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cuboat_actuators::servoFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cuboat_actuators::servoFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cuboat_actuators::servoFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cuboat_actuators::servoFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cuboat_actuators::servoFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cuboat_actuators::servoFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "756c384977ae119574d7b7f885f900d9";
  }

  static const char* value(const ::cuboat_actuators::servoFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x756c384977ae1195ULL;
  static const uint64_t static_value2 = 0x74d7b7f885f900d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::cuboat_actuators::servoFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cuboat_actuators/servoFeedback";
  }

  static const char* value(const ::cuboat_actuators::servoFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cuboat_actuators::servoFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#part3: the feedback message, to be sent by server during execution\n"
"float32 complete_percentage\n"
"\n"
;
  }

  static const char* value(const ::cuboat_actuators::servoFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cuboat_actuators::servoFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.complete_percentage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servoFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cuboat_actuators::servoFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cuboat_actuators::servoFeedback_<ContainerAllocator>& v)
  {
    s << indent << "complete_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.complete_percentage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUBOAT_ACTUATORS_MESSAGE_SERVOFEEDBACK_H
